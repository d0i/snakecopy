#!/bin/sh
''':'
exec python3 -u "$0" "$@"
'''
# above trick is from here:
# https://stackoverflow.com/questions/17458528/why-does-this-snippet-with-a-shebang-bin-sh-and-exec-python-inside-4-single-q


import sys
import re
import os
import stat
import subprocess
from socket import gethostname
import argparse
import threading
import select
import time

def flagUp(flag, c):
      return flag|(1<<c)
def flagDown(flag, c):
      return flag&~(1<<c)
def isFlagUp(flag, c):
      return flag&(1<<c) > 0

__Hostname = gethostname()

class Tee(threading.Thread):
      def __init__(self, pipe_in, pipe_outs, bs=512, debug=False):
            threading.Thread.__init__(self, name="Tee")
            self._i = pipe_in
            self.icnt = 0
            self._oL = pipe_outs
            self._mqD = {}
            for o in self._oL:
                  self._mqD[o.fileno()] = []
            self._debug = debug
            self._bs = bs
      def run(self):
            poller = select.poll()
            poller.register(self._i, select.POLLIN|select.POLLHUP)
            input_eof = False
            mqStat = 0
            while input_eof == False or mqStat > 0:
                  r = poller.poll(10)
                  if len(r) == 0:
                        raise RuntimeError("too long freeze... shall not happen here in practice")
                  for fd, ev in r:
                        if ev & (select.POLLIN|select.POLLHUP):
                              data = self._i.read1(self._bs)
                              if len(data) == 0:
                                    input_eof = True
                              else:
                                    self.icnt += len(data)
                                    for k in self._mqD:
                                          self._mqD[k].append(data)
                                          mqStat = flagUp(mqStat, k)
                                          poller.register(k, select.POLLOUT)
                        elif ev & select.POLLOUT and isFlagUp(mqStat, fd):
                              mq = self._mqD[fd]
                              data = mq.pop(0)
                              if len(mq) == 0:
                                    poller.unregister(fd)
                                    mqStat = flagDown(mqStat, fd)
                              l = os.write(fd, data)
                              if l < len(data):
                                    # push it back to next write
                                    mq.insert(0, data[l:])
            for o in self._oL:
                  o.close()
                  
def mkhdr(nodes, config):
      hdrL = []
      hdrL.append(str(config["bufsize"]))
      hdrL.append(config["localcmd"])
      hdrL.append(config["remotecmd_template"])
      hdrL += nodes
      hdrL.append('')
      hdrL.append('') # to make last empty line
      return '\n'.join(hdrL).encode('us-ascii')

def naive_readline(instream):
      lL = []
      while True:
            c = instream.read1(1)
            if c == b'\n':
                  break
            if len(c) == 0:
                  raise EOFError
            lL.append(c)
      return b''.join(lL)

def parsehdr(instream):
      l1=naive_readline(instream)
      bufsize = int(l1)
      localcmd = naive_readline(instream).decode('utf-8')
      remotecmd = naive_readline(instream).decode('utf-8')
      nodes = []
      while True:
            host = naive_readline(instream).decode('utf-8')
            if len(host) == 0:
                  break
            nodes.append(host)
      config = {
            "remotecmd_template": remotecmd,
            "localcmd": localcmd,
            "bufsize": bufsize,
            }
      
      return nodes, config            
      
def slave():
      nodes, config = parsehdr(sys.stdin.buffer)
      if len(nodes) > 0:
            head = nodes[0]
            body = nodes[1:]
            hdr = mkhdr(body, config)
            localcmd = subprocess.Popen(config["localcmd"],
                                        bufsize=config["bufsize"],
                                        stdin=subprocess.PIPE,
                                        stdout=sys.stdout.buffer,
                                        stderr=sys.stderr,
                                        shell=True,
                                        cwd="/")
            remotecmd = subprocess.Popen(config["remotecmd_template"].format(head=head),
                                        bufsize=config["bufsize"],
                                        stdin=subprocess.PIPE,
                                        stdout=sys.stdout.buffer,
                                        stderr=sys.stderr,
                                        shell=True)
            remotecmd.stdin.write(hdr)
            remotecmd.stdin.flush()
            tee = Tee(sys.stdin.buffer, [localcmd.stdin, remotecmd.stdin], bs=config["bufsize"], debug=True)
            tee.start()
            localcmd.wait()
            assert localcmd.returncode==0
            remotecmd.wait()
            assert remotecmd.returncode==0
            tee.join()
      else:
            # I'm the tail end of the snake copy. let's just run the localcmd
            localcmd = subprocess.Popen(config["localcmd"],
                                        bufsize=config["bufsize"],
                                        stdin=sys.stdin.buffer,
                                        stdout=sys.stdout.buffer,
                                        stderr=sys.stderr,
                                        shell=True)
            localcmd.wait()
            assert localcmd.returncode==0

def main(argv):
      parser = argparse.ArgumentParser(description="snakecopy")
      parser.add_argument("--inventry", "-i", default="./hosts.txt")
      parser.add_argument("--slave", action="store_true", default=False)
      parser.add_argument("--bufsize", type=int, default=1400)
      parser.add_argument("--snakecopy", type=str, default="snakecopy")
      parser.add_argument("srcpath", default=None, nargs='?')
      args = parser.parse_args(argv[1:])
      

      config = {
            "mastercmd": "tar zcf - {srcpath}",
            "remotecmd_template": "ssh -A {head} {snakecopy} --slave",
            #"remotecmd_template": "cat > /tmp/snakecmd_{head}.out", # for debug
            "localcmd": "tar -C / -zxpf -",
            #"localcmd": "cat > /tmp/slave.out", # for debug
            "bufsize": args.bufsize,
      }

      if args.slave:
            return slave()

      # master process
      # equiv: (mkhdr nodes[1:] ; tar zcf - path) | ssh -A nodes[0] snakecopy --slave
      if args.srcpath == None:
            parser.print_usage()
            raise SystemExit("no path given")
      if args.srcpath[0] != '/':
            parser.print_usage()
            raise SystemExit("path MUST be absolute path\n-- and all nodes shall have same directory structure!")
      if len(args.srcpath) < int(os.getenv("SNAKECOPY_PATHLEN_MIN", 5)):
            raise SystemExit("""\
path length({}) is too short. This is a kind reminder not to overwrite whole system!
-- if you are quite sure, please set SNAKECOPY_PATHLEN_MIN envirionment variable
   to appropriate number!""".format(len(args.srcpath)))

      m = os.stat(args.srcpath).st_mode
      if not (stat.S_ISDIR(m) or stat.S_ISREG(m)):
            raise SystemExit("given path is not a normal file nor directory.")

      with open(args.inventry, 'r') as f:
            lines = f.readlines()
      nodes = filter(lambda h: len(h)>0, [re.sub(r'#.*$', '', ln).strip() for ln in lines])
      nodes = list(nodes)
      head = nodes[0]
      body = nodes[1:]
      hdr = mkhdr(body, config)

      mastercmd = subprocess.Popen(config["mastercmd"].format(srcpath=args.srcpath),
                                   bufsize=args.bufsize,
                                   stdin=None,
                                   stdout=subprocess.PIPE,
                                   stderr=sys.stderr,
                                   shell=True,
                                   cwd="/")
      remotecmd = subprocess.Popen(config["remotecmd_template"].format(head=head, snakecopy=args.snakecopy),
                                  bufsize=args.bufsize,
                                  stdin=subprocess.PIPE,
                                  stdout=sys.stdout.buffer,
                                  stderr=sys.stderr,
                                  shell=True)
      #debugcmd = subprocess.Popen("cat > /tmp/master.out",
      #                            stdin=subprocess.PIPE, shell=True)
                                  
      remotecmd.stdin.write(hdr)
      remotecmd.stdin.flush()
      tee = Tee(mastercmd.stdout, [remotecmd.stdin], bs=args.bufsize, debug=True)
      tee.start()
      mastercmd.wait()
      assert mastercmd.returncode==0
      remotecmd.wait()
      assert remotecmd.returncode==0
      tee.join()

if __name__ == '__main__':
      main(sys.argv)
